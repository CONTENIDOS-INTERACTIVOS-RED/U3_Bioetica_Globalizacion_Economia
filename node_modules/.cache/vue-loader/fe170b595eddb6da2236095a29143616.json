{"remainingRequest":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/src/views/curso/Tema1.vue?vue&type=template&id=6d44c7f2&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/src/views/curso/Tema1.vue","mtime":1753217879780},{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}