{"remainingRequest":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/src/views/curso/Tema2.vue?vue&type=template&id=06a04c33&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/src/views/curso/Tema2.vue","mtime":1753217879780},{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Bioetica_Globalizacion_Economia/U3_Bioetica_Globalizacion_Economia/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gRWwgcm9sIGRlIGxhcyBwb2zDrXRpY2FzIGdsb2JhbGVzIGVuIGxhIHByb3RlY2Npw7NuIGRlIGxvcyBkZXJlY2hvcyBodW1hbm9zIHkgbG9zIHJlY3Vyc29zIG5hdHVyYWxlcyciKQogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNQoKICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgQSBuaXZlbCBtdW5kaWFsLCB2YXJpYXMgbm9ybWFzIHkgcG9sw610aWNhcyBpbnRlcm5hY2lvbmFsZXMgaGFuIHNpZG8gaW1wbGVtZW50YWRhcyBwYXJhIHByb3RlZ2VyIHRhbnRvIGxvcyBkZXJlY2hvcyBodW1hbm9zIGNvbW8gbG9zIHJlY3Vyc29zIG5hdHVyYWxlczoKCiAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNwogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSJEZWNsYXJhY2nDs24gVW5pdmVyc2FsIGRlIGxvcyBEZXJlY2hvcyBIdW1hbm9zIikKICAgICAgICAgICAgcCBVbiBtYXJjbyBmdW5kYW1lbnRhbCBwYXJhIGxhIHByb3RlY2Npw7NuIGRlIGxvcyBkZXJlY2hvcyBodW1hbm9zLCBlcyBsYSBEZWNsYXJhY2nDs24gVW5pdmVyc2FsIGRlIGxvcyBEZXJlY2hvcyBIdW1hbm9zIChEVURIKSwgYWRvcHRhZGEgcG9yIGxhIE9OVSBlbiAxOTQ4LiBBdW5xdWUgbm8gYWJvcmRhIGVzcGVjw61maWNhbWVudGUgbG9zIHJlY3Vyc29zIG5hdHVyYWxlcywgZXN0YWJsZWNlIHByaW5jaXBpb3MgY2xhdmVzIGNvbW8gZWwgZGVyZWNobyBhIHVuIG5pdmVsIGRlIHZpZGEgYWRlY3VhZG8sIHF1ZSBpbmNsdXllIGVsIGFjY2VzbyBhIHJlY3Vyc29zIGVzZW5jaWFsZXMgY29tbyBhZ3VhLCBhbGltZW50b3MgeSB1biBlbnRvcm5vIHNhbHVkYWJsZS4gRXN0YSBkZWNsYXJhY2nDs24gc3VicmF5YSBsYSByZWxhY2nDs24gZW50cmUgZWwgYmllbmVzdGFyIGh1bWFubyB5IGxhIGdlc3Rpw7NuIHJlc3BvbnNhYmxlIGRlIGxvcyByZWN1cnNvcyBuYXR1cmFsZXMsIGRlIG1hbmVyYSBlc3BlY2lhbCwgcGFyYSBnYXJhbnRpemFyIGNvbmRpY2lvbmVzIGRpZ25hcyBkZSB2aWRhIHBhcmEgdG9kYXMgbGFzIHBlcnNvbmFzLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJBZ2VuZGEgMjAzMCIpCiAgICAgICAgICAgIHAgTGEgYWdlbmRhIDIwMzAgcGFyYSBlbCBkZXNhcnJvbGxvIHNvc3RlbmlibGUsIHRhbWJpw6luIGVzdGFibGVjZSBtZXRhcyBjbGFyYXMgcGFyYSBnZXN0aW9uYXIgbG9zIHJlY3Vyc29zIG5hdHVyYWxlcyBkZSBtYW5lcmEgcmVzcG9uc2FibGUsIGdhcmFudGl6YW5kbyBxdWUgZWwgYWNjZXNvIGEgZXN0b3MgcmVjdXJzb3Mgc2VhIGVxdWl0YXRpdm8geSBzb3N0ZW5pYmxlIChOYWNpb25lcyBVbmlkYXMsIDIwMTUpLiBFbnRyZSBsb3MgT2JqZXRpdm9zIGRlIGRlc2Fycm9sbG8gc29zdGVuaWJsZSBtw6FzIHJlbGV2YW50ZXMsIGVsIE9EUyA2IHNlIGNlbnRyYSBlbiBnYXJhbnRpemFyIGVsIGFjY2VzbyBhIGFndWEgbGltcGlhIHkgc2FuZWFtaWVudG8sIG1pZW50cmFzIHF1ZSBlbCBPRFMgMTMgcHJvbXVldmUgbGEgYWNjacOzbiBjbGltw6F0aWNhIHBhcmEgbWl0aWdhciBsb3MgaW1wYWN0b3MgZGVsIGNhbWJpbyBjbGltw6F0aWNvIHNvYnJlIGxhcyBjb211bmlkYWRlcyB2dWxuZXJhYmxlcy4gKE5hY2lvbmVzIFVuaWRhcywgMjAxNSkKCiAgICAgICAgICAuZGl2KHRpdHVsbz0iRGVyZWNob3MgY29tdW5pY2FkZXMgaW5kw61nZW5hcyIpCiAgICAgICAgICAgIHAgTG9zIGRlcmVjaG9zIGRlIGxhcyBjb211bmlkYWRlcyBpbmTDrWdlbmFzIGVzdMOhbiBwcm90ZWdpZG9zIGEgdHJhdsOpcyBkZSBtYXJjb3Mgbm9ybWF0aXZvcyBpbnRlcm5hY2lvbmFsZXMsIGNvbW8gbGEgQ29udmVuY2nDs24gMTY5IGRlIGxhIE9JVCwgcXVlIGVzdGFibGVjZSBsYSBuZWNlc2lkYWQgZGUgY29uc3VsdGFyIGEgZXN0YXMgY29tdW5pZGFkZXMgYW50ZXMgZGUgbGEgZXhwbG90YWNpw7NuIGRlIHN1cyB0aWVycmFzIG8gcmVjdXJzb3MgbmF0dXJhbGVzIChPcmdhbml6YWNpw7NuIEludGVybmFjaW9uYWwgZGVsIFRyYWJham8gW09JVF0sIDE5ODkpLiBFc3RvIGFzZWd1cmEgcXVlIHN1cyBkZXJlY2hvcyB0ZXJyaXRvcmlhbGVzIHNlYW4gcmVzcGV0YWRvcyB5IHF1ZSBwYXJ0aWNpcGVuIGFjdGl2YW1lbnRlIGVuIGxhIHRvbWEgZGUgZGVjaXNpb25lcyBxdWUgYWZlY3RhbiBzdSBlbnRvcm5vLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJQcm90ZWNjacOzbiBkZSBsb3MgcmVjdXJzb3MgbmF0dXJhbGVzIikKICAgICAgICAgICAgcCBQb3Igb3RybyBsYWRvLCBsYSBwcm90ZWNjacOzbiBkZSBsb3MgcmVjdXJzb3MgbmF0dXJhbGVzIGVzdMOhIGVzdHJlY2hhbWVudGUgdmluY3VsYWRhIGEgbGEganVzdGljaWEgc29jaWFsLiBMYXMgcG9sw610aWNhcyBpbnRlcm5hY2lvbmFsZXMgYWJvZ2FuIHBvciB1biB1c28gc29zdGVuaWJsZSBkZSBsb3MgcmVjdXJzb3MgcGFyYSBldml0YXIgbGEgc29icmVleHBsb3RhY2nDs24geSBnYXJhbnRpemFyIHF1ZSBsb3MgYmVuZWZpY2lvcyBkZSBlc3RvcyBzZWFuIGRpc3RyaWJ1aWRvcyBkZSBtYW5lcmEganVzdGEsIGVzcGVjaWFsbWVudGUgZW4gbGFzIHJlZ2lvbmVzIG3DoXMgZW1wb2JyZWNpZGFzIChOYWNpb25lcyBVbmlkYXMsIDIwMTUpLiBMYXMgcG9sw610aWNhcyB0YW1iacOpbiBidXNjYW4gcHJldmVuaXIgbGEgdmlvbGFjacOzbiBkZSBkZXJlY2hvcyBsYWJvcmFsZXMgZW4gYWN0aXZpZGFkZXMgZXh0cmFjdGl2YXMgeSBwcm90ZWdlciBhIGxhcyBwb2JsYWNpb25lcyB2dWxuZXJhYmxlcyBxdWUgZGVwZW5kZW4gZGlyZWN0YW1lbnRlIGRlIGxvcyByZWN1cnNvcyBuYXR1cmFsZXMgcGFyYSBzdSBzdXN0ZW50by4gKE5hY2lvbmVzIFVuaWRhcywgMjAyMikKICAgICAgLmNvbC1sZy01CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xLnBuZyIsIGFsdD0iIikubXQtNC5tdC1sZy0wCgogICAgI3RfMl8xLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuMV0gTWFyY28gw6l0aWNvIHkgbGVnYWwgZGUgbGFzIHBvbMOtdGljYXMgZ2xvYmFsZXMgZGUgc29zdGVuaWJpbGlkYWQgCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBFbCBtYXJjbyBsZWdhbCBkZSBsYXMgcG9sw610aWNhcyBnbG9iYWxlcyBkZSBzb3N0ZW5pYmlsaWRhZCwgZXN0w6EgY29tcHVlc3RvIHBvciB1bmEgc2VyaWUgZGUgYWN1ZXJkb3MsIGNvbnZlbmNpb25lcyB5IHRyYXRhZG9zIGludGVybmFjaW9uYWxlcyBxdWUgYnVzY2FuIHJlZ3VsYXIgZWwgdXNvIGRlIGxvcyByZWN1cnNvcyBuYXR1cmFsZXMgeSBnYXJhbnRpemFyIHF1ZSBzdSBleHBsb3RhY2nDs24gbm8gY29udHJhdmVuZ2EgbG9zIGRlcmVjaG9zIGh1bWFub3MgbmkgY2F1c2UgZGHDsW8gaXJyZXZlcnNpYmxlIGFsIG1lZGlvIGFtYmllbnRlLgoKICAgIGgzKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFdm9sdWNpw7NuIGRlIGxhcyBwb2zDrXRpY2FzIGdsb2JhbGVzIGRlIHNvc3RlbmliaWxpZGFkCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBMYXMgcG9sw610aWNhcyBnbG9iYWxlcyBkZSBzb3N0ZW5pYmlsaWRhZCBoYW4gZXZvbHVjaW9uYWRvIGEgbG8gbGFyZ28gZGUgbGFzIMO6bHRpbWFzIGTDqWNhZGFzLCBpbXB1bHNhZGFzIHBvciBsYSBjcmVjaWVudGUgY29uY2llbmNpYSBzb2JyZSBsb3MgaW1wYWN0b3MgYW1iaWVudGFsZXMsIHNvY2lhbGVzIHkgZWNvbsOzbWljb3MgZGVsIGRlc2Fycm9sbG8uIEluaWNpYWxtZW50ZSwgZWwgY29uY2VwdG8gZGUgc29zdGVuaWJpbGlkYWQgc2UgZW50ZW5kw61hIHByaW5jaXBhbG1lbnRlIGRlc2RlIHVuYSBwZXJzcGVjdGl2YSBhbWJpZW50YWwsIGNlbnRyYWRhIGVuIGxhIGNvbnNlcnZhY2nDs24gZGUgbG9zIHJlY3Vyc29zIG5hdHVyYWxlcy4gU2luIGVtYmFyZ28sIGNvbiBlbCB0aWVtcG8gc2UgaGEgYWRvcHRhZG8gdW4gZW5mb3F1ZSBtw6FzIGludGVncmFsIHF1ZSB0YW1iacOpbiBjb25zaWRlcmEgbGEgZGltZW5zacOzbiBzb2NpYWwgeSBlY29uw7NtaWNhIGRlbCBkZXNhcnJvbGxvOgoKCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC0xMi5jb2wtbWQtMTAKICAgICAgICBMaW5lYVRpZW1wb0UuY29sb3ItcHJpbWFyaW8KICAgICAgICAgIC5yb3codGl0dWxvPSJEw6ljYWRhIGRlIDE5NzAiIHN1YnRpdHVsbz0iIikKICAgICAgICAgICAgLmNvbC1tZC04LmNvbC14bC03Lm1iLTQubWItbGctMAogICAgICAgICAgICAgIHAgRW4gbGEgZMOpY2FkYSBkZSAxOTcwLCBlbCBtdW5kbyBjb21lbnrDsyBhIHRvbWFyIGNvbmNpZW5jaWEgZGUgbG9zIHByb2JsZW1hcyBhbWJpZW50YWxlcyBhIHRyYXbDqXMgZGUgZXZlbnRvcyBjbGF2ZXMgY29tbyBsYSBDdW1icmUgZGUgRXN0b2NvbG1vIGRlIDE5NzIsIHF1ZSBmdWUgZWwgcHJpbWVyIGVuY3VlbnRybyBtdW5kaWFsIHBhcmEgZGlzY3V0aXIgdGVtYXMgZGUgZGVzYXJyb2xsbyB5IG1lZGlvIGFtYmllbnRlLiBFc3RlIGV2ZW50byBkaW8gbHVnYXIgYSBsYSBjcmVhY2nDs24gZGVsIFByb2dyYW1hIGRlIGxhcyBOYWNpb25lcyBVbmlkYXMgcGFyYSBlbCBNZWRpbyBBbWJpZW50ZSwgZWwgY3VhbCBoYSBzaWRvIGZ1bmRhbWVudGFsIGVuIGxhIGV2b2x1Y2nDs24gZGUgbGFzIHBvbMOtdGljYXMgYW1iaWVudGFsZXMgZ2xvYmFsZXMuCiAgICAgICAgICAgIC5jb2wtbWQtNC5jb2wteGwtNQogICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvMi5wbmcnLCBhbHQ9JycpCiAgICAgICAgICAucm93KHRpdHVsbz0iMTk4NyIgc3VidGl0dWxvPSIiKQogICAgICAgICAgICAuY29sLW1kLTguY29sLXhsLTcubWItNC5tYi1sZy0wCiAgICAgICAgICAgICAgcCBDb24gZWwgdGllbXBvLCBsYSBzb3N0ZW5pYmlsaWRhZCBzZSBleHBhbmRpw7MgcGFyYSBpbmNsdWlyIGxhIGNvbnNlcnZhY2nDs24gZGUgbG9zIHJlY3Vyc29zIG5hdHVyYWxlcywgeSBlbCBkZXNhcnJvbGxvIGh1bWFuby4gVW4gaGl0byBlbiBlc3RhIGV2b2x1Y2nDs24gZnVlIGxhIHB1YmxpY2FjacOzbiBkZWwgaW5mb3JtZSBkZSBsYSBDb21pc2nDs24gQnJ1bmR0bGFuZCBlbiAxOTg3LCB0aXR1bGFkbyAiTnVlc3RybyBGdXR1cm8gQ29tw7puIiwgcXVlIGRlZmluacOzIGVsIGNvbmNlcHRvIGRlIGRlc2Fycm9sbG8gc29zdGVuaWJsZSBjb21vIGFxdWVsIHF1ZSAic2F0aXNmYWNlIGxhcyBuZWNlc2lkYWRlcyBkZWwgcHJlc2VudGUgc2luIGNvbXByb21ldGVyIGxhIGNhcGFjaWRhZCBkZSBsYXMgZ2VuZXJhY2lvbmVzIGZ1dHVyYXMsIHBhcmEgc2F0aXNmYWNlciBzdXMgcHJvcGlhcyBuZWNlc2lkYWRlcyIuIEVzdGEgZGVmaW5pY2nDs24gaW50ZWdyw7MgbGFzIGRpbWVuc2lvbmVzIGVjb27Ds21pY2EsIHNvY2lhbCB5IGFtYmllbnRhbCBkZWwgZGVzYXJyb2xsby4KICAgICAgICAgICAgLmNvbC1tZC00LmNvbC14bC01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi8zLnBuZycsIGFsdD0nJykKICAgICAgICAgIC5yb3codGl0dWxvPSIxOTkyIiBzdWJ0aXR1bG89IiIpCiAgICAgICAgICAgIC5jb2wtbWQtOC5jb2wteGwtNy5tYi00Lm1iLWxnLTAKICAgICAgICAgICAgICBwIE3DoXMgdGFyZGUsIGVuIDE5OTIsIGxhIEN1bWJyZSBkZSBsYSBUaWVycmEgZGUgUsOtbyAoQ3VtYnJlIGRlIFLDrW8gZGUgSmFuZWlybyksIG1hcmPDsyBvdHJvIGhpdG8gaW1wb3J0YW50ZSwgcHVlc3RvIHF1ZSBjb25zb2xpZMOzIGVsIGNvbmNlcHRvIGRlIHNvc3RlbmliaWxpZGFkIGVuIGVsIMOhbWJpdG8gZ2xvYmFsIGEgdHJhdsOpcyBkZSBsYSBBZ2VuZGEgMjEgeSBsYSBDb252ZW5jacOzbiBzb2JyZSBsYSBEaXZlcnNpZGFkIEJpb2zDs2dpY2EuIEVzdG9zIGFjdWVyZG9zIGludGVybmFjaW9uYWxlcyBlc3RhYmxlY2llcm9uIHByaW5jaXBpb3MgY2xhdmVzIHNvYnJlIGxhIGdlc3Rpw7NuIGRlIGxvcyByZWN1cnNvcyBuYXR1cmFsZXMgeSBlbCByZXNwZXRvIGRlIGxvcyBkZXJlY2hvcyBodW1hbm9zLCBlbiBlbCBjb250ZXh0byBkZSBsYSBzb3N0ZW5pYmlsaWRhZC4KICAgICAgICAgICAgLmNvbC1tZC00LmNvbC14bC01CiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi80LnBuZycsIGFsdD0nJykKCgogICAgI3RfMl8yLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuMl0gTGVnaXNsYWNpw7NuIGludGVybmFjaW9uYWwgeSBsb2NhbCwgc29icmUgZGVyZWNob3MgaHVtYW5vcyB5IHJlY3Vyc29zIG5hdHVyYWxlcwoKCiAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00IEVsIGVuZm9xdWUgZ2xvYmFsIHNvYnJlIGxhIHByb3RlY2Npw7NuIGRlIGxvcyBkZXJlY2hvcyBodW1hbm9zIHkgbG9zIHJlY3Vyc29zIG5hdHVyYWxlcywgZXN0w6EgZGV0ZXJtaW5hZG8gcG9yIHZhcmlvcyBpbnN0cnVtZW50b3MgeSBub3JtYXRpdmFzIGludGVybmFjaW9uYWxlcyBxdWUgYWJvcmRhbiwgdGFudG8gbG9zIGRlcmVjaG9zIGRlIGxhcyBwZXJzb25hcyBjb21vIGxhIHNvc3RlbmliaWxpZGFkIGFtYmllbnRhbDoKCiAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNwogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSJEZWNsYXJhY2nDs24gVW5pdmVyc2FsIGRlIGxvcyBEZXJlY2hvcyBIdW1hbm9zICgxOTQ4KSIpCiAgICAgICAgICAgIHAgQWRvcHRhZGEgcG9yIGxhIEFzYW1ibGVhIEdlbmVyYWwgZGUgbGEgT05VLCBlc3RhYmxlY2UgcXVlIHRvZG9zIGxvcyBzZXJlcyBodW1hbm9zIHRpZW5lbiBkZXJlY2hvIGEgbGEgdmlkYSwgbGEgbGliZXJ0YWQgeSBsYSBzZWd1cmlkYWQsIGFzw60gY29tbyBhIHVuIG5pdmVsIGRlIHZpZGEgYWRlY3VhZG8sIGxvIGN1YWwgaW5jbHV5ZSBlbCBhY2Nlc28gYSB1biBtZWRpbyBhbWJpZW50ZSBzYWx1ZGFibGUsIGFzcGVjdG8gcXVlIHRpZW5lIHVuYSByZWxhY2nDs24gZGlyZWN0YSBjb24gbGEgcHJvdGVjY2nDs24gZGUgbG9zIHJlY3Vyc29zIG5hdHVyYWxlcy4KCiAgICAgICAgICAuZGl2KHRpdHVsbz0iUHJvdG9jb2xvIGRlIEtpb3RvIikKICAgICAgICAgICAgcCBBY3VlcmRvIGludGVybmFjaW9uYWwgcXVlIGJ1c2NhIHJlZHVjaXIgbGFzIGVtaXNpb25lcyBkZSBnYXNlcyBkZSBlZmVjdG8gaW52ZXJuYWRlcm8gKEdFSSkgeSBhc8OtIGNvbWJhdGlyIGVsIGNhbGVudGFtaWVudG8gZ2xvYmFsLgoKCiAgICAgIC5jb2wtbGctNQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNS5wbmciLCBhbHQ9IiIpLm10LTQubXQtbGctMAoKICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy03Lm9yZGVyLTIKICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpCiAgICAgICAgICAuZGl2KHRpdHVsbz0iQWN1ZXJkbyBkZSBQYXLDrXMiKQogICAgICAgICAgICBwIEVsIEFjdWVyZG8gZGUgUGFyw61zIGVzIHVuIGFjdWVyZG8gZGVudHJvIGRlbCBtYXJjbyBkZSBsYSBDb252ZW5jacOzbiBNYXJjbyBkZSBsYXMgTmFjaW9uZXMgVW5pZGFzLCBzb2JyZSBlbCBDYW1iaW8gQ2xpbcOhdGljbywgcXVlIGVzdGFibGVjZSBtZWRpZGFzIHBhcmEgbGEgcmVkdWNjacOzbiBkZSBsYXMgZW1pc2lvbmVzIGRlIGdhc2VzIGRlIGVmZWN0byBpbnZlcm5hZGVyby4KCiAgICAgICAgICAuZGl2KHRpdHVsbz0iSVNPIDE0MDAxIEdlc3Rpw7NuIEFtYmllbnRhbCIpCiAgICAgICAgICAgIHAgRXN0YWJsZWNlIGxvcyBjcml0ZXJpb3MgcGFyYSB1biBzaXN0ZW1hIGRlIGdlc3Rpw7NuIGFtYmllbnRhbCBlZmVjdGl2bywgcXVlIGF5dWRhIGEgbGFzIG9yZ2FuaXphY2lvbmVzIGEgbWVqb3JhciBzdSBkZXNlbXBlw7FvIGFtYmllbnRhbC4KICAgICAgICAgIAogICAgICAgICAgLmRpdih0aXR1bG89IklTTyAyNjAwMCBSZXNwb25zYWJpbGlkYWQgU29jaWFsIikKICAgICAgICAgICAgcCBQcm9wb3JjaW9uYSBkaXJlY3RyaWNlcyBzb2JyZSBjw7NtbyBsYXMgb3JnYW5pemFjaW9uZXMgcHVlZGVuIG9wZXJhciBkZSBtYW5lcmEgc29jaWFsbWVudGUgcmVzcG9uc2FibGUsIHByb21vdmllbmRvIGxhIHNvc3RlbmliaWxpZGFkIHkgZWwgcmVzcGV0byBkZSBsb3MgZGVyZWNob3MgaHVtYW5vcy4KCgogICAgICAuY29sLWxnLTUub3JkZXItMQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNi5wbmciLCBhbHQ9IiIpLm10LTQubXQtbGctMAoKCiAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi01IENvbG9tYmlhLCBjb21vIHBhcnRlIGRlIGxhIGNvbXVuaWRhZCBpbnRlcm5hY2lvbmFsLCBoYSBhZG9wdGFkbyBkaXZlcnNvcyB0cmF0YWRvcywgY29udmVuY2lvbmVzIHkgcG9sw610aWNhcywgcGFyYSBhbGluZWFyc2UgY29uIGxhcyBub3JtYXRpdmFzIGludGVybmFjaW9uYWxlcyBlbiBtYXRlcmlhIGRlIGRlcmVjaG9zIGh1bWFub3MgeSByZWN1cnNvcyBuYXR1cmFsZXMuIEEgbml2ZWwgbG9jYWwsIGVsIHBhw61zIHRhbWJpw6luIHRpZW5lIHVuIHJvYnVzdG8gbWFyY28gbm9ybWF0aXZvIHF1ZSBidXNjYSBwcm90ZWdlciB0YW50byBhIGxhcyBwZXJzb25hcyBjb21vIGFsIG1lZGlvIGFtYmllbnRlOgoKCiAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNwogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSIxOTkxLiBDb25zdGl0dWNpw7NuIFBvbMOtdGljYSBkZSBDb2xvbWJpYSIpCiAgICAgICAgICAgIHAgUmVjb25vY2UgdW5hIHNlcmllIGRlIGRlcmVjaG9zIGZ1bmRhbWVudGFsZXMgcXVlIGluY2x1eWVuIGVsIGRlcmVjaG8gYSBsYSB2aWRhLCBhIGxhIHNhbHVkLCBhIHVuIGFtYmllbnRlIHNhbm8sIGEgbGEgZWR1Y2FjacOzbiB5IGEgbGEgcHJvcGllZGFkLiBFbiBzdSBhcnTDrWN1bG8gNzksIGxhIENvbnN0aXR1Y2nDs24gZXN0YWJsZWNlIGVsIGRlcmVjaG8gZGUgdG9kYXMgbGFzIHBlcnNvbmFzIGEgZ296YXIgZGUgdW4gYW1iaWVudGUgc2FubyB5IGxhIG9ibGlnYWNpw7NuIGRlbCBFc3RhZG8gZGUgcHJvdGVnZXIgbGEgYmlvZGl2ZXJzaWRhZC4KCiAgICAgICAgICAuZGl2KHRpdHVsbz0iTGV5IDE0NDggZGVsIDIwMTEuIExleSBkZSBWw61jdGltYXMgeSBSZXN0aXR1Y2nDs24gZGUgVGllcnJhcyIpCiAgICAgICAgICAgIHAgUmVjb25vY2UgbG9zIGRlcmVjaG9zIGRlIGxhcyB2w61jdGltYXMgZGVsIGNvbmZsaWN0byBhcm1hZG8geSBlc3RhYmxlY2UgbWVjYW5pc21vcyBkZSByZXN0aXR1Y2nDs24gZGUgdGllcnJhcywgbG8gY3VhbCB0aWVuZSBpbXBsaWNhY2lvbmVzIGltcG9ydGFudGVzIGVuIGxhIHByb3RlY2Npw7NuIGRlIGxvcyByZWN1cnNvcyBuYXR1cmFsZXMsIGVuIMOhcmVhcyBhZmVjdGFkYXMgcG9yIGVsIGNvbmZsaWN0by4KCgogICAgICAuY29sLWxnLTUKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzcucG5nIiwgYWx0PSIiKS5tdC00Lm10LWxnLTAKCiAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctNy5vcmRlci0yCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89IkxleSA5OSBkZSAxOTkzLiBNaW5pc3RlcmlvIGRlbCBNZWRpbyBBbWJpZW50ZSIpCiAgICAgICAgICAgIHAgU2UgY3Jlw7MgZWwgTWluaXN0ZXJpbyBkZWwgTWVkaW8gQW1iaWVudGUgKGhveSBjb25vY2lkbyBjb21vIGVsIE1pbmlzdGVyaW8gZGUgQW1iaWVudGUgeSBEZXNhcnJvbGxvIFNvc3RlbmlibGUpIHkgZXN0YWJsZWNlIGVsIG1hcmNvIG5vcm1hdGl2byBwYXJhIGxhIHByb3RlY2Npw7NuIGRlIGxvcyByZWN1cnNvcyBuYXR1cmFsZXMgZW4gQ29sb21iaWEuCgogICAgICAgICAgLmRpdih0aXR1bG89IjIwMTYuIFNlbnRlbmNpYSBULTYyMiIpCiAgICAgICAgICAgIHAgUmVjb25vY2nDsyBlbCBkZXJlY2hvIGZ1bmRhbWVudGFsIGEgbGEgcGF6IHkgYWwgbWVkaW8gYW1iaWVudGUsIGFmaXJtYW5kbyBxdWUgbGFzIGNvbXVuaWRhZGVzIGFmZWN0YWRhcyBwb3IgbGEgbWluZXLDrWEgaWxlZ2FsIHkgZWwgZXh0cmFjdGl2aXNtbyB0aWVuZW4gZWwgZGVyZWNobyBhIHZpdmlyIGVuIHVuIGFtYmllbnRlIGxpYnJlIGRlIGNvbnRhbWluYWNpw7NuLgogICAgICAgICAgCiAgICAgICAgICAuZGl2KHRpdHVsbz0iMjAxNC4gTGV5IDE3MTUgRW5lcmfDrWFzIFJlbm92YWJsZXMiKQogICAgICAgICAgICBwIEVzdGFibGVjZSB1biBtYXJjbyBub3JtYXRpdm8gcGFyYSBlbCBhcHJvdmVjaGFtaWVudG8gZGUgZnVlbnRlcyBubyBjb252ZW5jaW9uYWxlcyBkZSBlbmVyZ8OtYSwgY29tbyBsYSBzb2xhciB5IGXDs2xpY2EsIGVuIHVuIGVzZnVlcnpvIHBvciByZWR1Y2lyIGxhIGRlcGVuZGVuY2lhIGRlIHJlY3Vyc29zIG5hdHVyYWxlcyBubyByZW5vdmFibGVzIHkgcHJvbW92ZXIgbGEgc29zdGVuaWJpbGlkYWQuCgogICAgICAuY29sLWxnLTUub3JkZXItMQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOC5wbmciLCBhbHQ9IiIpLm10LTQubXQtbGctMAoKCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy0xMgogICAgICAgIC5iZy1jb2xvci00LnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzkuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBUYW50byBhIG5pdmVsIGludGVybmFjaW9uYWwgY29tbyBlbiBDb2xvbWJpYSwgZXhpc3RlIHVuYSBsZWdpc2xhY2nDs24gcm9idXN0YSB5IGVuIGNvbnN0YW50ZSBldm9sdWNpw7NuLCBwYXJhIHByb3RlZ2VyIGxvcyBkZXJlY2hvcyBodW1hbm9zIHkgbG9zIHJlY3Vyc29zIG5hdHVyYWxlcy4gU2luIGVtYmFyZ28sIGxvcyBkZXNhZsOtb3MgcGVyc2lzdGVuIHkgZXMgZnVuZGFtZW50YWwgc2VndWlyIGltcHVsc2FuZG8gcG9sw610aWNhcyBww7pibGljYXMgcXVlIGludGVncmVuIGVsIHJlc3BldG8gcG9yIGxvcyBkZXJlY2hvcyBmdW5kYW1lbnRhbGVzIHkgbGEgc29zdGVuaWJpbGlkYWQgYW1iaWVudGFsLgoKCiAgICAjdF8yXzMudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKS5tYi01CiAgICAgIGgyICNbc3BhbiAyLjNdIFJlc3BvbnNhYmlsaWRhZCBzb2NpYWwgZGUgbGFzIGVtcHJlc2FzIGVuIGxhIHByb3RlY2Npw7NuIGRlIHJlY3Vyc29zIG5hdHVyYWxlcwoKICAgIC5yb3cubWItNAogICAgICAuY29sLWxnLTgKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgRW4gbGEgdW5pZGFkIGFudGVyaW9yLCBzZSBhYm9yZMOzIGxhIFJlc3BvbnNhYmlsaWRhZCBTb2NpYWwgQ29ycG9yYXRpdmEgeSDDqXRpY2EgZW4gbGFzIGRlY2lzaW9uZXMgZW1wcmVzYXJpYWxlcywgdmllbmRvIGxhIGltcG9ydGFuY2lhIGRlIG51ZXZhbWVudGUgcmVzYWx0YXIgZWwgcGFwZWwgcHJvdGFnw7NuaWNvIGRlIGxhcyBvcmdhbml6YWNpb25lcywgcG9ycXVlIGVzdGFzIGRlYmVuIGFkb3B0YXIgdW5hIHBvc3R1cmEgw6l0aWNhLCBjb21wcm9tZXRpw6luZG9zZSBhIHVuYSBnZXN0acOzbiBlZmljaWVudGUgZGUgbG9zIHJlY3Vyc29zLCBhIGxhIHJlZHVjY2nDs24gZGUgc3UgaHVlbGxhIGVjb2zDs2dpY2EgeSBhbCByZXNwZXRvIHBvciBsb3MgZGVyZWNob3MgaHVtYW5vcyB5IGVsIGJpZW5lc3RhciBkZSBsYXMgY29tdW5pZGFkZXMuIExhIFJTQyB5IGxhIMOpdGljYSBlbiBsb3MgbmVnb2Npb3MsIG5vIHNvbiBzb2xvIHVuIGltcGVyYXRpdm8gbW9yYWwsIHNpbm8gdGFtYmnDqW4gdW5hIGVzdHJhdGVnaWEgZW1wcmVzYXJpYWwgaW50ZWxpZ2VudGUgcXVlIGNvbnRyaWJ1eWUgYSBsYSBzb3N0ZW5pYmlsaWRhZCBhIGxhcmdvIHBsYXpvIHkgYSBsYSBjcmVhY2nDs24gZGUgdmFsb3IgdGFudG8gcGFyYSBsYSBzb2NpZWRhZCBjb21vIHBhcmEgbGEgZW1wcmVzYSBtaXNtYS4gRXN0byBlcyBwb3NpYmxlIGEgdHJhdsOpcyBkZSBpbm5vdmFjacOzbiB0ZWNub2zDs2dpY2EgeSBwcsOhY3RpY2FzIHNvc3RlbmlibGVzLgogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEwLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikubXQtNC5tdC1sZy0wCgogICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNSBQYXJhIHF1ZSB1bmEgZW1wcmVzYSBzZSBjb252aWVydGEgZW4gdW4gImJ1ZW4gY2l1ZGFkYW5vIGNvcnBvcmF0aXZvIiwgZXMgZGVjaXIsIHF1ZSBkZXN0aW5lIHJlY3Vyc29zIHkgZXNmdWVyem9zIHBhcmEgbWVqb3JhciBsYSBjYWxpZGFkIGRlIHZpZGEgZGUgbGEgY29tdW5pZGFkLCBlbiBzdSBjb25qdW50bywgZGViZSBjdW1wbGlyIHByZXZpYW1lbnRlIGNvbiB1bmEgc2VyaWUgZGUgcmVzcG9uc2FiaWxpZGFkZXMgZnVuZGFtZW50YWxlcy4gRXN0YXMgcmVzcG9uc2FiaWxpZGFkZXMgc2UgZW5jdWVudHJhbiByZWZsZWphZGFzIGVuIGxhIHBpcsOhbWlkZSBkZSBDYXJyb2xsLCB1biBtb2RlbG8gcXVlIGVzdGFibGVjZSB1bmEgamVyYXJxdcOtYSBkZSBvYmxpZ2FjaW9uZXMgcXVlIGxhcyBlbXByZXNhcyBkZWJlbiBhc3VtaXIgZGUgbWFuZXJhIHByb2dyZXNpdmE6CgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItaW5mbwogICAgICAucC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAgICAgLmNvbC1sZy0xMAogICAgICAgICAgICBoMi5teS01LnRleHQtY2VudGVyIFBpcsOhbWlkZSBkZSBDYXJyb2xsCiAgICAgICAgICAgIEltYWdlbkluZm9ncmFmaWNhLmNvbG9yLXNlY3VuZGFyaW8oZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgICAgdGVtcGxhdGUodi1zbG90OmltYWdlbikKICAgICAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvaW5mbzEucG5nJywgYWx0PScnLCBzdHlsZT0ibWF4LXdpZHRoOiA3MDdweDsiKS5teC1hdXRvCgogICAgICAgICAgICAgICAgLmJnLWNvbG9yLTUuYm94LXNoYWRvdy5wLTMoeD0iNzAlIiB5PSIxNC41JSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgICAgaDUgUmVzcG9uc2FiaWxpZGFkIGZpbGFudHLDs3BpY2EKICAgICAgICAgICAgICAgICAgcCBFbiBwcmltZXIgbml2ZWwsIGxhIOKAnHJlc3BvbnNhYmlsaWRhZCBlY29uw7NtaWNh4oCdOyBlc3RhIHJlc3BvbnNhYmlsaWRhZCBpbXBsaWNhIHF1ZSBsYSBlbXByZXNhIGRlYmUgc2VyIHJlbnRhYmxlIHkgZ2VuZXJhciBiZW5lZmljaW9zLCBkYWRvIHF1ZSBzaW4gZWxsbyBubyB0ZW5kcsOtYSByYXrDs24gZGUgc2VyLiBFbiBvdHJhcyBwYWxhYnJhcywgbGEgdmlhYmlsaWRhZCBlY29uw7NtaWNhIGRlIGxhIGVtcHJlc2EsIGNvbnN0aXR1eWUgbGEgYmFzZSBzb2JyZSBsYSBjdWFsIHNlIGVkaWZpY2EgbGEgcG9zaWJpbGlkYWQgZGUgY3VtcGxpciBjb24gb3RyYXMgcmVzcG9uc2FiaWxpZGFkZXMgc29jaWFsZXMgKENhcnJvbGwsIDIwMTMpLiBTaW4gbGEgcmVudGFiaWxpZGFkLCBubyBlcyBwb3NpYmxlIG9mcmVjZXIgcHJvZHVjdG9zIG8gc2VydmljaW9zIHF1ZSBsYSBzb2NpZWRhZCBuZWNlc2l0YS4KCiAgICAgICAgICAgICAgICAuYmctY29sb3ItNS5ib3gtc2hhZG93LnAtMyh4PSI3NyUiIHk9IjQxJSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgICAgaDUgUmVzcG9uc2FiaWxpZGFkIMOpdGljYQogICAgICAgICAgICAgICAgICBwIEVsIHNlZ3VuZG8gbml2ZWwgZGUgbGEgcGlyw6FtaWRlIGVzIGxhIOKAnHJlc3BvbnNhYmlsaWRhZCBsZWdhbOKAnSwgcXVlIGV4aWdlIGEgbGFzIGVtcHJlc2FzIGN1bXBsaXIgY29uIGxhcyBsZXllcyB5IHJlZ2xhbWVudGFjaW9uZXMgdmlnZW50ZXMuIEVsIHJlc3BldG8gcG9yIGxhIGxlZ2FsaWRhZCBkZWJlIHNlciB1bmEgcHJpb3JpZGFkLCB5YSBxdWUgZWwgY3VtcGxpbWllbnRvIGRlIGxhcyBub3JtYXMgZXMgdW4gaW1wZXJhdGl2byBwYXJhIG1hbnRlbmVyIGxhIGNvbmZpYW56YSBww7pibGljYSB5IGVsIGJ1ZW4gZnVuY2lvbmFtaWVudG8gZGUgbGFzIGFjdGl2aWRhZGVzIGNvbWVyY2lhbGVzLiBEZXNhZm9ydHVuYWRhbWVudGUsIG5vIHNvbiBwb2NvcyBsb3MgY2Fzb3MgZW4gcXVlIGxhIGZhbHRhIGRlIGNvbXByb21pc28gY29uIGVzdGUgcHJpbmNpcGlvLCBkYSBsdWdhciBhIGVzY8OhbmRhbG9zIHF1ZSBhZmVjdGFuIGxhIHJlcHV0YWNpw7NuIHkgZWwgYmllbmVzdGFyIHNvY2lhbC4gKENhcnJvbGwsIDIwMTMpCgogICAgICAgICAgICAgICAgLmJnLWNvbG9yLTUuYm94LXNoYWRvdy5wLTMoeD0iODQlIiB5PSI2NSUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICAgIGg1IFJlc3BvbnNhYmlsaWRhZCBsZWdhbAogICAgICAgICAgICAgICAgICBwIExhIOKAnHJlc3BvbnNhYmlsaWRhZCDDqXRpY2HigJ0sIGhhY2UgcmVmZXJlbmNpYSBhIGxhIG9ibGlnYWNpw7NuIGRlIGFjdHVhciBjb24ganVzdGljaWEsIHNlciB0cmFuc3BhcmVudGUgeSBldml0YXIgY2F1c2FyIGRhw7FvLiBFc3RhIHJlc3BvbnNhYmlsaWRhZCB2YSBtw6FzIGFsbMOhIGRlIGxvIHF1ZSBsYSBsZXkgZXN0aXB1bGEgeSBzZSByZWZpZXJlIGEgcmVhbGl6YXIgbG8gcXVlIGVzIGNvcnJlY3RvIHkganVzdG8sIGluY2x1c28gY3VhbmRvIG5vIGV4aXN0ZSB1bmEgbm9ybWEgbGVnYWwgcXVlIGxvIGV4aWphLiBMYXMgZW1wcmVzYXMgZGViZW4gY3VtcGxpciBjb24gbGFzIGV4cGVjdGF0aXZhcyBzb2NpYWxlcyB5IGFjdHVhciBjb25mb3JtZSBhIGxvcyBwcmluY2lwaW9zIMOpdGljb3MsIHNpbiByZWN1cnJpciBhIGF0YWpvcyBpbGVnYWxlcyBvIGlubW9yYWxlcy4gKENhcnJvbGwsIDIwMTMpCgogICAgICAgICAgICAgICAgLmJnLWNvbG9yLTUuYm94LXNoYWRvdy5wLTMoeD0iODklIiB5PSI4NyUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICAgIGg1IFJlc3BvbnNhYmlsaWRhZCBlY29uw7NtaWNhCiAgICAgICAgICAgICAgICAgIHAgU29sbyBhbCBjdW1wbGlyIGNvbiBlc3RhcyB0cmVzIHJlc3BvbnNhYmlsaWRhZGVzLCBsYXMgZW1wcmVzYXMgcHVlZGVuIGFzcGlyYXIgYSBzZXIgcmVhbG1lbnRlIHJlc3BvbnNhYmxlcyBjb24gbGEgc29jaWVkYWQgeSBjb250cmlidWlyIGRlIG1hbmVyYSBwb3NpdGl2YSBhbCBiaWVuZXN0YXIgY29sZWN0aXZvLCBjb21vIHNlIGRlbXVlc3RyYSBlbiBlbCBuaXZlbCBtw6FzIGFsdG8gZGUgbGEgcGlyw6FtaWRlIGRlIENhcnJvbGw6IGxhIOKAnHJlc3BvbnNhYmlsaWRhZCBmaWxhbnRyw7NwaWNh4oCdLCBxdWUgaW1wbGljYSBkZXN0aW5hciByZWN1cnNvcyBwYXJhIGNhdXNhcyBzb2NpYWxlcyBxdWUgbWVqb3JlbiBsYSBjYWxpZGFkIGRlIHZpZGEgZGUgbGFzIGNvbXVuaWRhZGVzLgoKCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmNvbG9yLXByaW1hcmlvCiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KCiAgICAgICAgICAgIC8vLSBSZWZlcmVuY2lhIGNvbiBlbmxhY2UgCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnJldmlzdGFzaWNlLmNvbS9pbmRleC5waHAvQ0lDRS9hcnRpY2xlL2Rvd25sb2FkLzYwMzEvNjAzMSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIERlIENhc3RybyBFbWlsaW8gQ2VyZMOhLCBGLiBKLiBBLiBMLiBNLiAocy9mKS4gTGFzIGVuZXJnw61hcyByZW5vdmFibGVzIGVuIGVsIMOhbWJpdG8gaW50ZXJuYWNpb25hbC4gUmV2aXN0YXNpY2UuY29tLiAKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vbmF0dXJhLm9yZy5jby9xdWUtZXMtYWdyaWN1bHR1cmEtc29zdGVuaWJsZS15LWNvbW8tc2UtcmVsYWNpb25hLWNvbi1lbC1tb25pdG9yZW8tY2xpbWF0aWNvLyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIE5hdHVyYSwgRi4gKDIwMjQsIGp1bmlvIDYpLiDCv1F1w6kgZXMgYWdyaWN1bHR1cmEgc29zdGVuaWJsZSB5IGPDs21vIHNlIHJlbGFjaW9uYSBjb24gZWwgbW9uaXRvcmVvIGNsaW3DoXRpY28/IEZ1bmRhY2nDs24gTmF0dXJhIENvbG9tYmlhLiAKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnJldmlzdGFlY29zaXN0ZW1hcy5uZXQvaW5kZXgucGhwL2Vjb3Npc3RlbWFzL2FydGljbGUvdmlldy82MTQiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBBcnRhcmF6LCBNLiAoMjAwMikuIFRlb3LDrWEgZGUgbGFzIHRyZXMgZGltZW5zaW9uZXMgZGUgZGVzYXJyb2xsbyBzb3N0ZW5pYmxlOiAuIEVjb3Npc3RlbWFzLCAxMSgyKS4gCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvZXJlYWRlci90ZWNub2xvZ2ljYWRlbG9yaWVudGUvNjIzMzI/cGFnZT0xNzAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBGZXJuw6FuZGV6IEdhcmPDrWEsIFIuICgyMDEzKS4gTGEgZGltZW5zacOzbiBlY29uw7NtaWNhIGRlbCBkZXNhcnJvbGxvIHNvc3RlbmlibGU6ICggZWQuKS4gRUNVLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2xjL3RlY25vbG9naWNhZGVsb3JpZW50ZS90aXR1bG9zLzI3NDYxMSIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIERlIENhc3RybyBFbWlsaW8gQ2VyZMOhLCBGLiBKLiBBLiBMLiBNLiAocy9mKS4gTGFzIGVuZXJnw61hcyByZW5vdmFibGVzIGVuIGVsIMOhbWJpdG8gaW50ZXJuYWNpb25hbC4gUmV2aXN0YXNpY2UuY29tLiAKICAgICAgICAgICAgLy8tIFJlZmVyZW5jaWEgc2luIGVubGFjZSAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvdGVtcGxhdGUvYm9vay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIHNwYW4gQ2VyZG9zIGNyaW9sbG9zIGNvbG9tYmlhbm9zIHkgYWdyaWN1bHR1cmEgc29zdGVuaWJsZS4gCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9ib29rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgc3BhbiBEZSBKYW5laXJvLCBSLiAoMTk5MikuIExhIGRlY2xhcmFjacOzbiBkZWwgUsOtbyBzb2JyZSBlbCBNZWRpbyBBbWJpZW50ZSB5IGVsIERlc2Fycm9sbG8uIFLDrW8gZGUgSmFuZWlybyBSZXDDumJsaWNhIEZlZGVyYXRpdmEgZGVsIEJyYXNpbC4sIGFwcm9iYWRhIGVuIEVzdG9jb2xtbyBlbCwgMTYuCgogICAgICAgICAgICAvLy0gUmVmZXJlbmNpYSBkZSB5b3V0dWJlIAogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly95b3V0dS5iZS9obHBUWmJpa2F6dz9zaT1YR0JKRVYzTC05cFRhLUdjIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgRW1wcmVzYXMgaW5ub3ZhZG9yYXMuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly95b3V0dS5iZS9LaDVscHF4VHc1TT9zaT1OTjFxQjE0VGJHTjlUeGlVIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgR29vZ2xlLCBNaWNyb3NvZnQgeSB0ZXNsYSwgZWwgdmVyZGFkZXJvIHJleSBkZSBsYSBpbnRlbGlnZW5jaWEgYXJ0aWZpY2lhbC4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3lvdXR1LmJlL1FLTGp3Q015djNNP3NpPXVBV2hPOXRueWdobGphSmciIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBJbm5vdmFjacOzbiB5IHNvc3RlbmliaWxpZGFkLgogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctMy5vZmZzZXQtbGctMQogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9tYXRlcmlhbC1jb21wbGVtZW50YXJpby5zdmcnLCBhbHQ9JycpCgo="},null]}